void surfaceTerms(const int sk, const dfloat *x, const dfloat *y, const dfloat *z, 
                  const dfloat time, const dfloat mu, const dfloat gamma, 
		  const dfloat *sgeo, const dlong *EToB, const dfloat *q, const dfloat *qhalo, dfloat *gradq) {

    const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];
    const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];
    const dfloat nz = sgeo[sk*p_Nsgeo+p_NZID];
    const dfloat sJ = sgeo[sk*p_Nsgeo+p_SJID];
    const dfloat invWJ = sgeo[sk*p_Nsgeo+p_WIJID];

    const dlong e = sk/p_Nsp;
    const int face = (sk - e*p_Nsp)/p_Nfp;
    const dlong sid = sk%p_Nsp;
    
    const dlong qid = e*p_Nsp*p_Nfields + sid;
    const dfloat rM  = q[qid + 0*p_Nsp];
    const dfloat ruM = q[qid + 1*p_Nsp];
    const dfloat rvM = q[qid + 2*p_Nsp];
    const dfloat rwM = q[qid + 3*p_Nsp];

    const dfloat uM = ruM/rM;
    const dfloat vM = rvM/rM;
    const dfloat wM = rwM/rM;

    dfloat rP  = qhalo[qid + 0*p_Nsp];
    dfloat ruP = qhalo[qid + 1*p_Nsp];
    dfloat rvP = qhalo[qid + 2*p_Nsp];
    dfloat rwP = qhalo[qid + 3*p_Nsp];

    dfloat uP = ruP/rP;
    dfloat vP = rvP/rP;
    dfloat wP = rwP/rP;

    const int bc = EToB[face+p_Nfaces*e];
    if(bc>0) {
    const int idM = 0;
	  const dfloat pM = gamma*gamma*rM;
	  dfloat pP = gamma*gamma*rP;
	  dfloat dudx = 0.f, dudy = 0.f, dudz = 0.f; //fake these values
	  dfloat dvdx = 0.f, dvdy = 0.f, dvdz = 0.f; //fake these values
	  dfloat dwdx = 0.f, dwdy = 0.f, dwdz = 0.f; //fake these values
	  cnsBoundaryConditions3D(bc, gamma, mu, \
						      time, x[idM], y[idM], z[idM], nx, ny, nz, \
							  rM, uM, vM, wM, pM,
							  0., 0., 0., 0., 0., 0., 0., 0., 0.,
							  &rP, &uP, &vP, &wP, &pP,
							  &dudx, &dudy, &dudz, &dvdx, &dvdy, &dvdz, &dwdx, &dwdy, &dwdz);
    }

    const dfloat sc = 0.5f*invWJ * sJ;
    const dlong gid = e*p_Nsp*p_Ngrads + sid;
    gradq[gid+0*p_Nsp] = sc*nx*(uP-uM);
    gradq[gid+1*p_Nsp] = sc*ny*(uP-uM);
    gradq[gid+2*p_Nsp] = sc*nz*(uP-uM);
    gradq[gid+3*p_Nsp] = sc*nx*(vP-vM);
    gradq[gid+4*p_Nsp] = sc*ny*(vP-vM);
    gradq[gid+5*p_Nsp] = sc*nz*(vP-vM);
    gradq[gid+6*p_Nsp] = sc*nx*(wP-wM);
    gradq[gid+7*p_Nsp] = sc*ny*(wP-wM);
    gradq[gid+8*p_Nsp] = sc*nz*(wP-wM);
}

// NsurfaceNodes = Nelements*p_Nfaces*p_Nfp;
@kernel void surfacePack(const int Nelements,
                        @restrict const int * vmapM,
                        @restrict const int * vmapP,
                        @restrict const dfloat *q,
                        @restrict dfloat *qpack,
                        @restrict dfloat *qhalo) {

  for(dlong e=0;e<Nelements;++e;@outer(0)) {
    for(int f=0;f<p_Nfaces;++f;@inner(2)) {
      for(int j=0;j<p_Nq;++j;@inner(1)) {
        for(int i=0;i<p_Nq;++i;@inner(0)) {
          const dlong sid = e*p_Nsp + f*p_Nfp + j*p_Nq + i;
		  
          dlong vid = vmapM[sid]%p_Np;
          dlong bid = e*p_Np*p_Nfields + vid;
          //const dlong qid = sid*p_Nfields;
          const dlong qid = e*p_Nsp*p_Nfields + f*p_Nfp + j*p_Nq + i;
          
          qpack[qid+0*p_Nsp] = q[bid+0*p_Np];
          qpack[qid+1*p_Nsp] = q[bid+1*p_Np];
          qpack[qid+2*p_Nsp] = q[bid+2*p_Np];
          qpack[qid+3*p_Nsp] = q[bid+3*p_Np];
          
          // Identifying halo node
          // This can be split into two out-of-order kernels or run simultaneously in two streams
          vid = vmapP[sid];
          const dlong eP = vid/p_Np;
          vid = vid%p_Np;
          
          bid = eP*p_Np*p_Nfields + vid;
          
          qhalo[qid+0*p_Nsp] = q[bid+0*p_Np];
          qhalo[qid+1*p_Nsp] = q[bid+1*p_Np];
          qhalo[qid+2*p_Nsp] = q[bid+2*p_Np];
          qhalo[qid+3*p_Nsp] = q[bid+3*p_Np];
        }
      }
    }
  }
}

@kernel void surfaceHalo(const int Nelements,
                        @restrict const int * vmapM,
                        @restrict const int * vmapP,
                        @restrict const dfloat *q,
                        @restrict dfloat *qpack,
                        @restrict dfloat *qhalo) {

  for(dlong e=0;e<Nelements;++e;@outer(0)) {
    for(int f=0;f<p_Nfaces;++f;@inner(2)) {
      for(int j=0;j<p_Nq;++j;@inner(1)) {
        for(int i=0;i<p_Nq;++i;@inner(0)) {
           const dlong sid = e*p_Nfaces*p_Nfp + f*p_Nfp + j*p_Nq + i;

           const dlong qid = e*p_Nsp*p_Nfields + f*p_Nfp + j*p_Nq + i;

           // Identifying halo node
           // This can be split into two out-of-order kernels or run simultaneously in two streams
           dlong vid = vmapP[sid];
           const dlong eP = vid/p_Np;
           vid = vid%p_Np;

           const dlong bid = eP*p_Np*p_Nfields + vid;

           qhalo[qid+0*p_Nsp] = q[bid+0*p_Np];
           qhalo[qid+1*p_Nsp] = q[bid+1*p_Np];
           qhalo[qid+2*p_Nsp] = q[bid+2*p_Np];
           qhalo[qid+3*p_Nsp] = q[bid+3*p_Np];

        }
      }
    }
  }
}

@kernel void surfaceUnpack(const int Nelements,
                        @restrict const int * vmapM,
                        @restrict const int * vmapP,
                        @restrict const dfloat *gradq_pack,
                        @restrict dfloat *gradq) {
  
  for(dlong e=0;e<Nelements;++e;@outer(0)) {
    for(int f=0;f<p_Nfaces;++f;@inner(2)) {
      for(int j=0;j<p_Nq;++j;@inner(1)) {
        for(int i=0;i<p_Nq;++i;@inner(0)) {
          const dlong sid = e*p_Nsp + f*p_Nfp + j*p_Nq + i;
          
          const dlong vid = vmapM[sid]%p_Np;
          const dlong bid = e*p_Np*p_Ngrads + vid;
          const dlong gid = e*p_Nsp*p_Ngrads + f*p_Nfp + j*p_Nq + i;
          
          @atomic gradq[bid+0*p_Np] += gradq_pack[gid+0*p_Nsp];
          @atomic gradq[bid+1*p_Np] += gradq_pack[gid+1*p_Nsp];
          @atomic gradq[bid+2*p_Np] += gradq_pack[gid+2*p_Nsp];
          @atomic gradq[bid+3*p_Np] += gradq_pack[gid+3*p_Nsp];
          @atomic gradq[bid+4*p_Np] += gradq_pack[gid+4*p_Nsp];
          @atomic gradq[bid+5*p_Np] += gradq_pack[gid+5*p_Nsp];
          @atomic gradq[bid+6*p_Np] += gradq_pack[gid+6*p_Nsp];
          @atomic gradq[bid+7*p_Np] += gradq_pack[gid+7*p_Nsp];
          @atomic gradq[bid+8*p_Np] += gradq_pack[gid+8*p_Nsp];
        }
      }
    }
  }
}

/*
@kernel void surfaceUnpack(const int Nelements,
                        @restrict const int * vmapM,
                        @restrict const int * vmapP,
                        @restrict const dfloat *gradq_pack,
                        @restrict dfloat *gradq) {

  for(dlong e=0;e<Nelements;++e;@outer(0)) {
    for(int f=0;f<p_Nfaces;++f;@inner(2)) {
      for(int j=0;j<p_Nq;++j;@inner(1)) {
        for(int i=0;i<p_Nq;++i;@inner(0)) {
          const dlong sid = e*p_Nfaces*p_Nfp + f*p_Nfp + j*p_Nq + i;

          dlong vid = vmapM[sid]%p_Np;
          dlong bid = e*p_Np*p_Ngrads + vid;

          for(int g=0;g<p_Ngrads;++g) { 
          @atomic gradq[bid+g*p_Np] += gradq_pack[sid*p_Ngrads+g]; 
          }

        }
      }
    }
  }
}*/

/*
@kernel void surfaceUnpack(const int Nelements,
                        @restrict const int * vmapM,
                        @restrict const int * vmapP,
                        @restrict const dfloat *gradq_pack,
                        @restrict dfloat *gradq) {

  for(dlong e=0;e<Nelements;++e;@outer(0)) {
    for(int j=0;j<p_Nq;++j;@inner(2)) {
      for(int i=0;i<p_Nq;++i;@inner(1)) {
        for(int g=0;g<p_Ngrads;++g;@inner(0)) {
    
          const dlong nid = e*p_Nfaces*p_Nfp + j*p_Nq + i;
          for(int f=0;f<p_Nfaces;++f) {
            dlong sid = nid + f*p_Nfp;

            dlong vid = vmapM[sid]%p_Np;
            dlong bid = e*p_Np*p_Ngrads + vid;

            @atomic gradq[bid+g*p_Np] += gradq_pack[sid*p_Ngrads+g];
          }
        }
      }
    }
  }
}*/

@kernel void surfaceGrad(const int NsurfaceNodes,
                         @restrict const dfloat * sgeo,
			 @restrict const dfloat * LIFT,
			 @restrict const int * vmapM,
			 @restrict const int * vmapP,
			 @restrict const int * EToB,
			 @restrict const dfloat * x,
			 @restrict const dfloat * y,
			 @restrict const dfloat * z,
			 const dfloat time,
			 const dfloat mu,
			 const dfloat gamma,
			 @restrict const dfloat *qpack,
			 @restrict dfloat * qhalo,
			 @restrict dfloat * gradq) {

/*   for(dlong e=0;e<Nelements;++e;@outer(0)) {
	  for(int f=0;f<p_Nfaces;++f;@inner(3)) {
		  for(int j=0;j<p_Nq;++j;@inner(2)) {
			  for(int i=0;i<p_Nq;++i;inner(1)) {
				  // dlong sk = e*p_Nfaces
			  }
		  }
	  }
  } */
  
  const int block_size = 64;
  for(dlong e=0;e<NsurfaceNodes;++e; @tile(64,@outer,@inner)) {
    surfaceTerms(e, x, y, z, time, mu, gamma, sgeo, EToB, qpack, qhalo, gradq);
  }

}
